import cv2
import os
import base64
import requests
from tqdm import tqdm
from dotenv import load_dotenv
load_dotenv()
api = os.getenv("OPENAI_API_KEY")

def summarize_video(video_path: str,api:str, frame_gap_seconds: int = 4) -> str:
    """
    Extract key frames from video, describe each frame using OpenAI Vision API,
    summarize the whole video based on frame descriptions.

    Args:
        video_path (str): Full path to input video.
        api_key (str): OpenAI API Key.
        frame_gap_seconds (int): Interval in seconds between analyzed frames.

    Returns:
        str: Summary generated by OpenAI from frame descriptions.
    """
    api_key= api
    if not os.path.exists(video_path):
        return f"Video not found: {video_path}"

    # Output storage
    frames_dir = "frames_temp"
    os.makedirs(frames_dir, exist_ok=True)
    frame_text_file = "frame_descriptions.txt"

    # Open video
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        return " Error: Could not read video"

    fps = cap.get(cv2.CAP_PROP_FPS)
    frame_interval = max(int(fps * frame_gap_seconds), 1)

    # Helper: Describe Frame
    def describe_frame(img_path):
        with open(img_path, "rb") as f:
            img_b64 = base64.b64encode(f.read()).decode("utf-8")

        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user",
                    "content": [
                                    {
                                        "type": "text",
                                        "text": "You are an seucrity detection vision analyst and you check these thing Abuse,Arrest,Arson,Assault,Burglary,Explosion,Fighting,RoadAccidents,Robbery,Shooting,Shoplifting,Stealing,Vandalism in video. Carefully inspect the image and describe only events or objects that seem unusual, dangerous, unexpected, damaged, out of place, malfunctioning, or indicating any anomaly. Keep your response concise and focused on sceurity details only."
                                    },
                                    {
                                        "type": "image_url",
                                        "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}
                                    }
                                ]

                }
            ],
            "max_tokens": 200
        }

        headers = {"Content-Type": "application/json",
                   "Authorization": f"Bearer {api_key}"}

        r = requests.post("https://api.openai.com/v1/chat/completions",
                          headers=headers, json=payload)

        if r.status_code != 200:
            return "Description error"

        return r.json()["choices"][0]["message"]["content"].strip()

    # âœ… Extract + Describe Frames
    with open(frame_text_file, "w") as f, tqdm(total=int(cap.get(cv2.CAP_PROP_FRAME_COUNT)),
                                              desc="Analyzing Video") as bar:
        frame_idx = 0
        while True:
            ret, frame = cap.read()
            if not ret: break

            if frame_idx % frame_interval == 0:
                img_path = os.path.join(frames_dir, f"frame_{frame_idx}.jpg")
                cv2.imwrite(img_path, frame)

                desc = describe_frame(img_path)
                f.write(f"Frame {frame_idx}: {desc}\n")
                f.flush()

            frame_idx += 1
            bar.update(1)

    cap.release()

    # Summarize All descriptions
    with open(frame_text_file, "r", encoding="utf-8") as f:
        text = f.read()

    payload = {
        "model": "gpt-4o",
        "messages": [{
            "role": "user",
            "content": f"Summarize this video based on frame descriptions:\n{text}"
        }],
        "max_tokens": 300
    }

    headers = {"Content-Type": "application/json",
               "Authorization": f"Bearer {api_key}"}

    r = requests.post("https://api.openai.com/v1/chat/completions",
                      headers=headers, json=payload)

    summary = r.json()["choices"][0]["message"]["content"].strip()

    return summary